<?xml version="1.0" encoding="UTF-8"?>
<!-- <!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN 2.0//EN" "http://www.springframework.org/dtd/spring-beans-2.0.dtd"> -->

<!-- <beans default-init-method="myInit" default-destroy-method="cleanup"> // calls user defined methods from triangle class on all beans -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"
       xmlns:context="http://www.springframework.org/schema/context">

    <!-- This bean is for Triangle.java
    <bean id="triangle" class="org.java.spring.Triangle">
        <property name="type" value="Equilateral"></property>
        <constructor-arg type="java.lang.String" value="Equilateral"></constructor-arg>
        <constructor-arg type="int" value="20"></constructor-arg>
        <constructor-arg index="0" value="Equilateral"></constructor-arg>
        <constructor-arg index="1" value="20"></constructor-arg>
    </bean> -->
    <!-- <bean id="triangle" class="org.java.spring.TrianglePoints">
        <property name="points">
            <list>
                <ref bean="point1"/>
                <ref bean="point2"/>
                <ref bean="point3"/>
            </list>
        </property>
    </bean> -->
    <bean id="point1" class="org.java.spring.Point">
        <property name="x" value="0"></property>
        <property name="y" value="0"></property>
    </bean>
    <bean id="point2" class="org.java.spring.Point">
        <property name="x" value="10"></property>
        <property name="y" value="10"></property>
    </bean>
    <bean id="point3" class="org.java.spring.Point">
        <property name="x" value="20"></property>
        <property name="y" value="20"></property>
    </bean>

    <!-- <bean id="triangle" class="org.java.spring.TrianglePoint">
            <property name="pointA" ref="point1"/>
            <property name="pointB" ref="point2"/>
            <property name="pointC">
                <bean class="org.java.spring.Point">
                    <property name ="x" value="20"></property>
                    <property name ="y" value="20"></property>
                </bean>
            </property>
        </bean> -->

    <!--Autowire 1) @byType(fails bcoz of multiple beans (point A, B ,c) of same type ) then 2) @byName(autowire to to
    beans whoâ€™s ids are same as variable names (pointA, B, C) in Triangle pt ) 3) @constructor-->
    <bean id="triangle" class="org.java.spring.TrianglePoint" autowire="byName" scope="prototype" init-method="myInit"
          destroy-method="cleanup"></bean>

    <!-- No need to define circle because of component annotation -->
    <!-- <bean id="circle" class="org.java.spring.Circle">
        <property name="radius" ref="point1"/>
    </bean> -->
    <bean id="radiusQ" class="org.java.spring.Point">
        <qualifier value="circleRelated"></qualifier><!-- qualifier defined in circle.java -->
        <property name="x" value="40"></property>
        <property name="y" value="40"></property>
    </bean>

    <bean id="pointA" class="org.java.spring.Point">
        <property name="x" value="0"></property>
        <property name="y" value="0"></property>
        <!--If values were defined in pointConfig.properties
        <property name="x" value="${pointA.pointX}"></property>
        <property name="y" value="${pointA.pointY}"></property>-->

    </bean>
    <bean id="pointB" class="org.java.spring.Point">
        <property name="x" value="10"></property>
        <property name="y" value="10"></property>
    </bean>
    <bean id="pointC" class="org.java.spring.Point">
        <property name="x" value="20"></property>
        <property name="y" value="20"></property>
    </bean>

    <!-- Out of box bean Factory post processors, used to set the values of bean properties from .properties file before beanFactory is being initialized -->
    <!--<bean class="org.spring.framework.beans.factory.config.PropertyPlaceHolderConfigurer">
        <property name="locations" value="pointConfig.properties"></property>
    </bean>-->

    <!-- Bean Inheritance -->
    <bean id="ParentTriangle" class="org.java.spring.TrianglePoint" abstract="true">
        <property name="pointA" ref="point1"/>
    </bean>
    <bean id="ChildTriangle" class="org.java.spring.TrianglePoint" parent="ParentTriangle">
        <!-- inherit point A -->
        <property name="pointB" ref="point2"/>
        <property name="pointC" ref="point3"/>
    </bean>
    <!-- End Inheritance -->

    <!-- User created pocessors -->
    <bean class="org.java.spring.DisplayNameBeanPostProcessor"/>
    <bean class="org.java.spring.MyBeanFactoryPP"/>

    <!-- Validates if all annotated/dependent beans are initialized when container loads to avoid nullPointerException -->
    <!-- <bean class="org.spring.framework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor"/>-->

    <!-- Includes all Annotation post processors so no need to include them individually -->
    <context:annotation-config/>

    <!-- Scan @Components to hook beans which are not defined in this xml but are annotated -->
    <context:component-scan base-package="org.java.spring"></context:component-scan>

    <!-- Used only with application context and not with beanFactory (1st advantage of ApplicationContext); internationalization support-->
    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basenames">
            <list>
                <value>contextmessage</value> <!-- defined in contextmessage.properties file -->
            </list>
        </property>
    </bean>
</beans>

        <!-- Notes: Basic Bean Scope
        1)	Singleton - bean is created Only once per spring container (Default Bean Scope)
        2)	Prototype - New bean created with every request and reference
        3)	Request- New bean per servlet request
        4)	Session - New bean per session
        5)	Global Session - New bean per Global HTTP session -->
